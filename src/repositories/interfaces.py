from typing import Protocol
from src.repositories.models import (
    BookCreate,
    BookResponse,
    NoteCreate,
    NoteRead,
    Evaluation,
)
from src.types import Embedding


class BookRepositoryInterface(Protocol):
    def add(self, book: BookCreate) -> BookResponse: ...

    def get(self, book_id: int) -> BookResponse | None: ...

    def list_books(self) -> list[BookResponse]: ...

    def get_by_ids(self, book_ids: list[int]) -> list[BookResponse]: ...

    def delete(self, book_id: int) -> None: ...


class NoteRepositoryInterface(Protocol):
    def add(self, note: NoteCreate) -> NoteRead: ...

    def get(self, note_id: int, book_id: int) -> NoteRead | None: ...

    def list_notes(self) -> list[NoteRead]: ...

    def delete(self, note_id: int) -> None: ...

    def get_random(self) -> NoteRead | None: ...

    def get_by_book_id(self, book_id: int) -> list[NoteRead]: ...

    def find_similar_notes(self, note: NoteRead, limit: int = 5) -> list[NoteRead]: ...

    def search_notes_by_embedding(
        self, embedding: Embedding, limit: int = 10, similarity_threshold: float = 0.5
    ) -> list[NoteRead]: ...

    def get_note_counts_by_book_ids(self, book_ids: list[int]) -> dict[int, int]: ...


class EvaluationRepositoryInterface(Protocol):
    def add(self, evaluation: Evaluation) -> Evaluation: ...

    def get_by_note_id(self, note_id: int) -> list[Evaluation]: ...
